import tree.expression.*;
import tree.statement.*;
import java.util.*;
import types.*;
import general.*;
parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


    public HashMap<String,Integer> vars = new HashMap<String,Integer>();
:};   
terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQUALS, PRINT, IF, LCURLY, RCURLY, ELSE, WHILE, LBRACK, RBRACK, OF;
terminal            FOR,TO,INTEGER,FLOAT,CHAR,BOOLEAN,STRING, ARRAY,FUNCTION,COMMA,RETURN;
terminal Integer   NUMBER;
terminal String   ID;
terminal GREATERTHAN, LESSTHAN, LESSOREQUALTHAN, GREATEROREQUALTHAN, EQUALSEQUALS, NOTEQUALS; 

non terminal Object declaration_list,function_list,function;
non terminal ArrayList<ParameterDecl> parameter_list,parameter_listp;
non terminal ParameterDecl parameter;
non terminal Type type;
non terminal ArrayList<StatementNode>    program, statement_list;
non terminal StatementNode statement;
non terminal ExpressionNode    expr, factor, term, sumfactor;
non terminal IdNode id;
non terminal List<ExpressionNode> index_list;
non terminal List<ExpressionNode> expr_listp,expr_list;
   

    program ::= declaration_list function_list statement_list:sl {:RESULT = sl;  :}
    ;
    
    declaration_list ::= type:t ID:id SEMI declaration_list {: SymbolsTable.getInstance().declareVariable(id,t);:}
    |
    ;
    
    type ::= INTEGER {: RESULT=new IntegerType();:}
            | FLOAT{: RESULT=new FloatType();:}
            | CHAR {: RESULT=new CharType();:}
            | BOOLEAN{: RESULT=new BooleanType();:}
            | STRING{: RESULT=new StringType();:}
            | ARRAY LBRACK NUMBER:num RBRACK OF type:t {: RESULT=new ArrayType(num.intValue(),t);:}
            ;
   statement_list ::= statement_list:xD statement:xP {:  xD.add(xP); RESULT = xD; :}
                 | {: ArrayList<StatementNode> nodeList = new ArrayList<StatementNode>(); RESULT = nodeList; :}
                  ;


   function_list ::= function function_list
                     |;

   function::=  FUNCTION type:t ID:id LPAREN parameter_list:pl RPAREN LCURLY statement_list:code RCURLY {: SymbolsTable.getInstance().declareFunction(id,new Function(id,pl,code,t)); :};

   parameter_list::= parameter:p parameter_listp:pl {:pl.add(0,p); RESULT= pl;  :}
                     |{: RESULT=new ArrayList<ParameterDecl>(); :};

   parameter_listp::= COMMA parameter:p parameter_listp:pl{:pl.add(0,p); RESULT= pl; :}
                      |{: RESULT=new ArrayList<ParameterDecl>(); :};
   parameter::= type:t ID:i{: RESULT=new ParameterDecl(i,t); :};


   statement ::= PRINT expr:e SEMI {:  RESULT = new PrintNode(e); :}
                 | id:i EQUALS expr:e SEMI {: RESULT = new AssignNode(e, i); :}
                 | IF LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY {: RESULT = new IfNode(e,s,null); :}
                 | IF LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY ELSE LCURLY statement_list:s2 RCURLY {: RESULT = new IfNode(e,s,s2); :}
                 | WHILE LPAREN expr:e RPAREN LCURLY statement_list:s RCURLY {: RESULT = new WhileNode(e,s); :}
                 | FOR LPAREN id:i EQUALS expr:e TO expr:e2 RPAREN LCURLY statement_list:s RCURLY {: RESULT = new ForNode(i,e,e2,s); :}
                 | RETURN expr:e SEMI {: RESULT = new ReturnNode(e); :}
                 ;


   expr      ::= expr:e GREATERTHAN sumfactor:f {: RESULT = new GreaterThanNode(f,e); :}
                | expr:e LESSTHAN sumfactor:f {: RESULT = new LessThanNode(f,e); :}
                | expr:e GREATEROREQUALTHAN sumfactor:f {: RESULT = new GreaterOrEqualsThanNode(f,e); :}
                | expr:e LESSOREQUALTHAN sumfactor:f {: RESULT = new LessOrEqualsThanNode(f,e); :}
                | expr:e EQUALSEQUALS sumfactor:f {: RESULT = new EqualsNode(f,e); :}
                | expr:e NOTEQUALS sumfactor:f {: RESULT = new NotEqualsNode(f,e); :}
                | sumfactor:f {: RESULT = f; :}
                ;
   
   sumfactor ::= sumfactor:e PLUS factor:f
                 {: RESULT = new SumNode(f,e); :}
                 |sumfactor:e MINUS factor:f
                 {: RESULT = new SubNode(f,e); :}
                 |
                 factor:f
                 {: RESULT = f; :}
                 ;
   factor    ::= factor:f TIMES term:t
                 {: RESULT = new MultNode(t,f); :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = new DivNode(t,f); :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;
   
   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = new NumberNode(n); :}
                 |
                 id:i
                 {: RESULT = i; :}
                 |
                  ID:i LPAREN expr_list:el  RPAREN {: RESULT= new FunctionCallNode(i,el);:}
                 ;

   id        ::= ID:i index_list:il {:RESULT = new IdNode(il, i);:};
                
   index_list ::= LBRACK expr:e RBRACK index_list:il {:il.add(0, e); RESULT = il;:}
                | {:RESULT = new ArrayList<ExpressionNode>();:}
                ;

   expr_list::= expr:p expr_listp:pl {:pl.add(0,p); RESULT= pl;  :}
                        |{: RESULT=new ArrayList<ExpressionNode>(); :};

   expr_listp::= COMMA expr:p expr_listp:pl{:pl.add(0,p); RESULT= pl; :}
                         |{: RESULT=new ArrayList<ExpressionNode>(); :};
